class Main {
    // Brute Force Method (O(n))
    public static boolean isPrime1(int num) {
        if (num <= 1) return false; // Handle edge cases
        for (int i = 2; i <= num / 2; i++) { // Optimization
            if (num % i == 0) return false;
        }
        return true;
    }

    // Square Root Optimization (O(√n))
    public static boolean isPrime2(int num) {
        if (num <= 1) return false; // Handle edge cases
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0) return false;
        }
        return true;
    }

    // Best Optimized Method using 6k ± 1 rule (O(√n))
    public static boolean isPrime3(int num) {
        if (num <= 1) return false; // Handle edge cases
        if (num == 2 || num == 3) return true;
        if (num % 2 == 0 || num % 3 == 0) return false;
        for (int i = 5; i * i <= num; i += 6) {
            if (num % i == 0 || num % (i + 2) == 0) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        int num = 97;
        System.out.println("isPrime1: " + isPrime1(num));
        System.out.println("isPrime2: " + isPrime2(num));
        System.out.println("isPrime3: " + isPrime3(num));
    }
}
