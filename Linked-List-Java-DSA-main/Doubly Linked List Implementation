class Node {
    int data;
    Node prev;
    Node next;

    Node(int data) {
        this.data = data;
    }
}

class Main {
    // Method to print the list in forward direction
    void printForward() {
        Node curr = head;
        System.out.print("Forward: ");
        while (curr != null) {
            System.out.print(curr.data + " -> ");
            curr = curr.next;
        }
        System.out.println("NULL");
    }

    // Method to print the list in reverse direction
    void printReverse() {
        if (head == null) return; // Check for empty list

        // Move to the last node (tail)
        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;
        }

        // Print in reverse order
        System.out.print("Reverse: ");
        while (tail != null) {
            System.out.print(tail.data + " -> ");
            tail = tail.prev;
        }
        System.out.println("NULL");
    }

    public static void main(String[] args) {
        Main dll = new Main(); // Creating an instance of Main class

        // Creating nodes
        dll.head = new Node(10);
        Node temp1 = new Node(20);
        Node temp2 = new Node(30);
        Node temp3 = new Node(40);

        // Linking nodes to form a doubly linked list: 10 <-> 20 <-> 30 <-> 40
        dll.head.next = temp1;
        temp1.prev = dll.head;
        temp1.next = temp2;
        temp2.prev = temp1;
        temp2.next = temp3;
        temp3.prev = temp2;

        // Printing the list in forward direction
        dll.printForward();

        // Printing the list in reverse direction
        dll.printReverse();
    }

    Node head; // Head of the doubly linked list
}
