class Main {
    static class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
        }
    }

    private Node head; // Head of the linked list

    // Insert at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head != null) {
            newNode.next = head;
            head.prev = newNode;
        }
        head = newNode;
    }

    // Insert at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node curr = head;
        while (curr.next != null) {
            curr = curr.next;
        }
        curr.next = newNode;
        newNode.prev = curr;
    }

    // Delete head of the list
    public void deleteHead() {
        if (head == null) return;
        head = head.next;
        if (head != null) {
            head.prev = null;
        }
    }

    // Delete last node
    public void deleteTail() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node curr = head;
        while (curr.next.next != null) {
            curr = curr.next;
        }
        curr.next = null;
    }

    // Print the linked list in forward order
    public void printForward() {
        Node curr = head;
        System.out.print("Forward: ");
        while (curr != null) {
            System.out.print(curr.data + " -> ");
            curr = curr.next;
        }
        System.out.println("NULL");
    }

    // Print the linked list in reverse order
    public void printReverse() {
        if (head == null) return;
        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;
        }
        System.out.print("Reverse: ");
        while (tail != null) {
            System.out.print(tail.data + " -> ");
            tail = tail.prev;
        }
        System.out.println("NULL");
    }

    // Reverse the doubly linked list
    public void reverseList() {
        if (head == null || head.next == null) return;

        Node curr = head;
        Node prev = null;
        
        while (curr != null) {
            prev = curr.prev;
            curr.prev = curr.next;
            curr.next = prev;
            curr = curr.prev; // Move to the next node in original order
        }
        // Update head to the last processed node
        head = prev.prev;
    }

    public static void main(String[] args) {
        Main dll = new Main();

        // Creating the initial doubly linked list: 10 <-> 20 <-> 30 <-> 40
        dll.insertAtEnd(10);
        dll.insertAtEnd(20);
        dll.insertAtEnd(30);
        dll.insertAtEnd(40);

        // Delete head
        dll.deleteHead();

        // Delete last node
        dll.deleteTail();

        // Insert a new node (5) at the beginning
        dll.insertAtBeginning(5);

        // Insert a new node (50) at the end
        dll.insertAtEnd(50);

        // Print the linked list
        dll.printForward();
        dll.printReverse();

        // Reverse the linked list
        dll.reverseList();

        // Print the reversed linked list
        dll.printForward();
        dll.printReverse();
    }
}
