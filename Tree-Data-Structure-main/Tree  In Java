import java.util.*;
class Node{
    int key;
    Node left;
    Node right;
    Node(int k){
        key=k;
    }
}
class Main {
    public static void inorder(Node root){
        if(root==null) return;
        inorder(root.left);
        System.out.print(root.key+" ");
        inorder(root.right);
    }
    public static void preorder(Node root){
        if(root==null) return;
        System.out.print(root.key+" ");
        preorder(root.left);
        preorder(root.right);
    }
     public static void postorder(Node root){
        if(root==null) return;
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.key+" ");
    }
    public static int Height(Node root){
        if(root==null) return 0;
        return 1+Math.max(Height(root.left),Height(root.right));
    }
    public static void printKdist(Node root,int K){
        if(root==null){
            return;
        }
        if(K==0){
            System.out.print(root.key+" ");
        }
        printKdist(root.left,K-1);
        printKdist(root.right,K-1);
    }
    public static void levelorder1(Node root){
        if(root==null) return;
        Queue<Node>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            Node curr=q.poll();
            System.out.print(curr.key+" ");
            if(curr.left!=null){
                q.add(curr.left);
            }
            if(curr.right!=null){
                q.add(curr.right);
            }
        }
    }
     public static void levelorder2(Node root){
         if(root==null) return;
         Queue<Node>q=new LinkedList<>();
         q.add(root);
         q.add(null);
         while(q.size()>1){
             Node curr=q.poll();
             if(curr==null){
                 System.out.println();
                 q.add(null);
                 continue;
             }
             System.out.print(curr.key+" ");
             if(curr.left!=null){
                 q.add(curr.left);
             }
             if(curr.right!=null){
                 q.add(curr.right);
             }
         }
     }
     public static void levelorder3(Node root){
        if(root==null) return;
        Queue<Node>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++)
            {
            Node curr=q.poll();
            System.out.print(curr.key+" ");
            if(curr.left!=null){
                q.add(curr.left);
            }
            if(curr.right!=null){
                q.add(curr.right);
            }
            }
            System.out.println();
        }
    }
    public static int SizeOfTree(Node root){
        if(root==null)return 0;
        return 1+SizeOfTree(root.left)+SizeOfTree(root.right);
    }
    public static int MaximumOfTree(Node root) {
    if (root == null) return Integer.MIN_VALUE;
    return Math.max(root.key, Math.max(MaximumOfTree(root.left), MaximumOfTree(root.right)));
}
    public static void LeftViewOfBinaryTree(Node root){
        if(root==null) return;
        Queue<Node>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int count=q.size();
            for(int i=0;i<count;i++){
                Node curr=q.poll();
                if(i==0){
                    System.out.print(curr.key);
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            System.out.println();
        }
    }
   static int maxLevel=0;
    public static void LeftViewRecursive(Node root,int level){
        if(root==null)return;
        if(maxLevel<level){
            System.out.print(root.key+" ");
            maxLevel=level;
        }
        LeftViewRecursive(root.left,level+1);
        LeftViewRecursive(root.right,level+1);
    }
    static int maxLevel2=0;
    public static void RightViewRecursive(Node root,int level){
        if(root==null)return;
        if(maxLevel2<level){
            System.out.print(root.key+" ");
            maxLevel2=level;
        }
       RightViewRecursive(root.right,level+1);
       RightViewRecursive(root.left,level+1);
    }
    public static void RightViewOfBinaryTree(Node root){
        if(root==null) return;
        Queue<Node>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int count=q.size();
            for(int i=0;i<count;i++){
                Node curr=q.poll();
                if(i==count-1){
                    System.out.print(curr.key);
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            System.out.println();
        }
    }
    public static boolean ChildrenSumProperty(Node root){
        if(root==null)return true;
        if(root.left==null && root.right==null) return true;
        int sum=0;
        if(root.left!=null){sum+=root.left.key;}
        if(root.right!=null){sum+=root.right.key;}
        return (root.key==sum&&ChildrenSumProperty(root.left)&&ChildrenSumProperty(root.right));
    }
    public static boolean isBalanced(Node root){
        if(root==null) return true;
        int lh=Height(root.left);
        int rh=Height(root.right);
        return (Math.abs(lh-rh)<=1 && isBalanced(root.left)&& isBalanced(root.right)); 
        }
        public static int isBalanced2(Node root){
        if(root==null) return 0;
        int lh=isBalanced2(root.left);
        if(lh==-1)return -1;
        int rh=isBalanced2(root.right);
        if(rh==-1)return -1;
        if(Math.abs(lh-rh)>1)return -1;
        else{
            return Math.max(lh,rh)+1;
        }
        }
    public static void main(String[] args) {
        Node root=new Node(20);
        root.left=new Node(8);
        root.right=new Node(12);
        root.right.left=new Node(3);
        root.right.right=new Node(9);
        System.out.println("Inorder Traversal:");
        inorder(root);System.out.println();
        System.out.println("Preorder Traversal:");
        preorder(root);System.out.println();
        System.out.println("Postorder Traversal:");
        postorder(root);System.out.println();
        System.out.print("Height:");
        System.out.println(Height(root));
        System.out.print("Nodes At Distance K: ");
        printKdist(root,2);System.out.println();
        System.out.println("Level Order Traversal in one line: ");
        levelorder1(root);System.out.println();
         System.out.println("Level Order Traversal line by line: ");
        levelorder2(root);System.out.println();
         System.out.println("Level Order Traversal line by line: ");
        levelorder3(root);System.out.println();
        System.out.print("Size Of Binary Tree: ");
        System.out.println(SizeOfTree(root));
        System.out.print("Maximum in Binary Tree: ");
        System.out.println(MaximumOfTree(root));
        System.out.print("Left View Of Binary Tree: ");
        System.out.println();
        LeftViewOfBinaryTree(root);
        System.out.print("Right View Of Binary Tree: ");
        System.out.println();
        RightViewOfBinaryTree(root);
        System.out.print("Left View Of Binary Tree Recursively: ");
        LeftViewRecursive(root,1);
        System.out.println();
        System.out.print("Right View Of Binary Tree Recursively: ");
        RightViewRecursive(root,1);
        System.out.println();
         System.out.print("Children Sum Property Check Of Binary Tree : ");
        System.out.println(ChildrenSumProperty(root));
        System.out.print("Balance Check Of Binary Tree : ");
        System.out.println(isBalanced(root));
        System.out.print("Balance Check Of Binary Tree : ");
        if(isBalanced2(root)>1)
         System.out.println("True");
        else
         System.out.println("False");
    }
}
